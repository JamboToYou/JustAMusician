// <auto-generated />
using System;
using JustAMusician.Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JustAMusician.Backend.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20200608204423_EnsureBandLeaderRelated")]
    partial class EnsureBandLeaderRelated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("JustAMusician.Backend.Entities.Band", b =>
                {
                    b.Property<int>("BandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bandId");

                    b.Property<int>("LeaderId")
                        .HasColumnName("leaderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("BandId");

                    b.HasIndex("LeaderId");

                    b.ToTable("bands");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("genreId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.Property<int?>("parentGenreId");

                    b.HasKey("GenreId");

                    b.HasIndex("parentGenreId");

                    b.ToTable("genres");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Instrument", b =>
                {
                    b.Property<int>("InstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("instrumentId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int?>("typeId");

                    b.HasKey("InstrumentId");

                    b.HasIndex("typeId");

                    b.ToTable("instruments");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.InstrumentType", b =>
                {
                    b.Property<int>("InstrumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("instrumentTypeId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type");

                    b.HasKey("InstrumentTypeId");

                    b.ToTable("instrumentType");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Link", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("linkId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url");

                    b.Property<int>("UserId");

                    b.HasKey("LinkId");

                    b.HasIndex("UserId");

                    b.ToTable("links");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("orderId");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("createdAt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updatedAt");

                    b.Property<int>("ownerId");

                    b.HasKey("OrderId");

                    b.HasIndex("ownerId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Relations.BandGenre", b =>
                {
                    b.Property<int>("BandId");

                    b.Property<int>("GenreId");

                    b.HasKey("BandId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BandGenre");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Relations.OrderTag", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("TagId");

                    b.HasKey("OrderId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("OrderTag");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Relations.UserBand", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("BandId");

                    b.HasKey("UserId", "BandId");

                    b.HasIndex("BandId");

                    b.ToTable("UserBand");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Relations.UserGenre", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("GenreId");

                    b.HasKey("UserId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("UserGenre");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Relations.UserInstrument", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("InstrumentId");

                    b.HasKey("UserId", "InstrumentId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("UserInstrument");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tagId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("TagId");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userId");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnName("about");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("passwordHash");

                    b.Property<int>("Role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnName("salt")
                        .HasMaxLength(16);

                    b.Property<DateTime>("SignedUpAt")
                        .HasColumnName("signedUpAt");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Band", b =>
                {
                    b.HasOne("JustAMusician.Backend.Entities.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Genre", b =>
                {
                    b.HasOne("JustAMusician.Backend.Entities.Genre", "ParentGenre")
                        .WithMany()
                        .HasForeignKey("parentGenreId");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Instrument", b =>
                {
                    b.HasOne("JustAMusician.Backend.Entities.InstrumentType", "Type")
                        .WithMany()
                        .HasForeignKey("typeId");
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Link", b =>
                {
                    b.HasOne("JustAMusician.Backend.Entities.User")
                        .WithMany("Links")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Order", b =>
                {
                    b.HasOne("JustAMusician.Backend.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("ownerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Relations.BandGenre", b =>
                {
                    b.HasOne("JustAMusician.Backend.Entities.Band", "Band")
                        .WithMany("BandGenres")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustAMusician.Backend.Entities.Genre", "Genre")
                        .WithMany("BandGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Relations.OrderTag", b =>
                {
                    b.HasOne("JustAMusician.Backend.Entities.Order", "Order")
                        .WithMany("OrderTags")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustAMusician.Backend.Entities.Tag", "Tag")
                        .WithMany("OrderTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Relations.UserBand", b =>
                {
                    b.HasOne("JustAMusician.Backend.Entities.Band", "Band")
                        .WithMany("UserBands")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustAMusician.Backend.Entities.User", "User")
                        .WithMany("UserBands")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Relations.UserGenre", b =>
                {
                    b.HasOne("JustAMusician.Backend.Entities.Genre", "Genre")
                        .WithMany("UserGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustAMusician.Backend.Entities.User", "User")
                        .WithMany("UserGenres")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustAMusician.Backend.Entities.Relations.UserInstrument", b =>
                {
                    b.HasOne("JustAMusician.Backend.Entities.Instrument", "Instrument")
                        .WithMany("UserInstruments")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustAMusician.Backend.Entities.User", "User")
                        .WithMany("UserInstruments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
